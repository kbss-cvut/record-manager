server.servlet.context-path=/record-manager
management.endpoints.web.exposure.include=health

# Driver to manage triple stores
driver=cz.cvut.kbss.ontodriver.rdf4j.Rdf4jDataSource
# URL of repository that holds main data of the application
repositoryUrl=http://localhost:7200/repositories/record-manager-app
# URL of repository where output and configuration of form-generator should be held
formGenRepositoryUrl=http://localhost:7200/repositories/record-manager-formgen
# REST endpoint of form generator service
formGenServiceUrl=http://localhost:8080/s-pipes/service?_pId=transform&sgovRepositoryUrl=https%3A%2F%2Fgraphdb.onto.fel.cvut.cz%2Frepositories%2Fkodi-slovnik-gov-cz
# Option to pass sameSite attribute for set-cookie headers. Possible values are None,Lax,Strict. In case of None value also attribute "Secure;" is added.
security.sameSite=

# Url of the website for password reset emails. e.g. https://study.com/ (must have "/" at the end)
appContext=http://localhost:3000/record-manager

# SMTP host
smtp.host=smtp.gmail.com
# SMTP port
smtp.port=587
# SMTP user
smtp.user=recordmanager@gmail.com
# SMTP password
smtp.password=AdminOrganization123

# Email display name
email.displayName=Record Manager
# if email.from is not entered, smtp.user is used instead
email.from=
# Email cc addresses where all invitations will be sent. For more use delimiter "," (can remain empty)
email.replyTo=
email.cc=
email.bcc=

# You can use variables in email contents by using {{variable}}, available variables are listed before email content property
# Password Reset email subject
email.passwordResetSubject=Password Reset
# PasswordReset email html content, variables: username, link, appContext
email.passwordResetContent=<div><p>Dear user {{username}}, </p><p>please set your new password here: {{link}} </p><p>Best regards, <br>StudyManager</p></div>

# UserInvite email subject
email.invitationSubject=Welcome to study
# UserInvite email html content, variables: username, link, name, appContext
email.invitationContent=<div><p>Dear {{name}}, </p><p>you have been invited to a study running at {{appContext}}. </p><p>Your username is: {{username}}. </p>\
  <p>Please set your password here: {{link}} </p><p>Best regards, <br>StudyManager</p></div>

# Password change email
email.passwordChangeSubject=Password Change
# PasswordReset email html content, variables: username, appContext
email.passwordChangeContent=<div><p>Dear user {{username}}, </p><p>your password has been changed. </p><p>Best regards, <br>RecordManager</p></div>

# Profile update email
email.profileUpdateSubject=Profile updated by a study coordinator
# PasswordReset email html content, variables: username, appContext
email.profileUpdateContent=<div><p>Dear user {{username}}, </p><p>your profile at {{appContext}} has been updated by a study coordinator. </p><p>Best regards, <br>RecordManager</p></div>

# Provider of application security. Possible values are 'internal' for internally stored users and 'oidc' for using an
# OIDC-compatible authentication service. Its URL is configured via Spring Boot configuration parameters
security.provider=internal

# Claim containing user roles in the OIDC access token (applies only when 'oidc' security provider is selected). Use
# dot notation for nested objects
security.oidc.roleClaim=realm_access.roles

# Configures allowed origins for CORS (e.g. http://localhost:3000). Use a comma to separate multiple values
security.cors.allowedOrigins=

records.allowedRejectReason=true
